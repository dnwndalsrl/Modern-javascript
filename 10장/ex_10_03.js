// 프로퍼티
// 프로퍼티를 나열할 때는 쉼표로 구분한다. 
// 프로퍼티 키: 빈 문자열을 포함하는 모든 문자열 또는 심벌 값
// 프로퍼티 값: 자바스크립트에서 사용할 수 있는 모든 값
var person = {
    name: 'Lee',
    age: 20
};

/*===================================*/
// 프로퍼티 키는 프로퍼티 값에 접근할 수 있는 이름으로서 식별자 역할을 한다.
// 반드시 식별자 네이밍 규칙을 따라야 하는 것은 아니지만, 미묘한 차이가 있다.
// 심벌 값도 프로퍼티 키로 사용할 수 있지만 일반적으로 문자열을 사용한다.
// 식별자 네이밍 규칙을 따르지 않는 이름에는 반드시 따옴표를 사용해야 한다.
var person = {
    firstName: 'Ung-mo', // 식별자 네이밍 규칙을 준수하는 프로퍼티 키
    'last-name' : 'Lee' // 식별자 네이밍 규칙을 준수하지 않는 프로퍼티 키
};
console.log(person); // {firstName: "Ung-mo", last-name: "Lee"}

/*===================================*/
// 문자열 또는 문자열로 평가할 수 있는 표현식을 사용해 프로퍼티 키를 동적으로 생성가능
// 이 경우에는 프로퍼티 키로 사용할 표현식을 대괄효로 묶어야한다.
var obj = {};
var key = 'hello';
obj[key] = 'world';
console.log(obj); // {hello: "world"}

/*===================================*/
// 빈 문자열을 프로퍼티 키로 사용해도 에러가 발생하지 않음
var foo = {
    '': ''
};
console.log(foo); // {"": ""} 

/*===================================*/
// 프로퍼티 키에 문자열이나 심벌 값 외의 값을 사용하면 암묵적 타입 변환을 통해 문자열이 된다.
var foo = {
    // 프로퍼티 키로 숫자 리터럴을 사용하면 따옴표는 붙지 않지만, 내부적으로는 문자열로 변환된다.
    0: 1,
    1: 2,
    2: 3
};
console.log(foo); // {0: 1, 1: 2, 2: 3}

/*===================================*/
// 예약어를 프로퍼티 키로 사용해도 에러가 발생하지는 않음
var foo = {
    var: '',
    function: ''
};
console.log(foo) // {var: "", function: ""}

/*===================================*/
// 이미 존재하는 프로퍼티 키를 중복 선언하면 나중에 선언한 프로퍼티가 먼저 선언한 프로퍼티를 덮어씌움
var foo = {
    name: 'Lee',
    name: 'Kim'
};
console.log(foo) // {name: "Kim"}