// 매개변수와 인수
// 1. 함수를 실행하기 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 필요가 있는 경우, 매개변수를 통해 인수를 전달한다.
// 2. 매개변수는 함수 몸체 내부에서만 참조할 수 있고, 함수 몸체 외부에서는 참조 불가능
// 3. 매개변수의 개수와 인수의 개수가 일치하는지 체크하지 않는다.
// 4. 매개변수보다 인수가 더 많은 경우 초과된 인수는 무시한다,.
function add(x, y) {
    console.log(x, y) // 2 5
    return x + y
}
// 호출
// 인수 1과 2가 매개변수 x와 y에 순서대로 할당되고 함수 몸체의 문들이 실행된다.
var result = add(1, 2)
console.log(add(2)) // NaN = x에는 2를 넘겨줬지만, y에는 undefined 그대로이므로 2 + undefined를 실행했기때문

/*===================================*/
// 인수 확인
// 자바스크립트의 경우 함수를 정의할 때 적절한 인수가 전달되었는지 확인할 필요가 있다.
function add(x, y) {
    if(typeof x !== 'number' || typeof y !== 'number') {
        throw new TypeError('인수는 모두 숫자 값이어야 합니다.')
    }
    return x + y
}

console.log(add(2)) // TypeError: 인수는 모두 숫자 값이어야 합니다.
console.log(aaa('a', 'b')) // TypeError: 인수는 모두 숫자 값이어야 합니다.

/*===================================*/
// 매개변수의 최대 개수
// 1. 함수의 매개변수는 코드를 이해하는 데 방해되는 요소이므로 이상적인 매개변수 개수는 0개이며 적을수록 좋다.
// 2. 이상적인 함수는 한 가지 일만 해야 하며 가급적 작게 만들어야 한다.
// 3. 따라서 매개변수는 최대 3개 이상을 넘지 않는 것을 권장한다.

/*===================================*/
// 반환문
// 1. 함수는 return 키워드와 표현식으로 이뤄진 반환문을 사용해 실행 결과를 함수 외부로 반환할 수 있다.
// 2. 반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나가거나, return 키워드 뒤에 오는 표현식을 평가해 반환한다.
// 3. 반환문으 생략 가능하다. 이때 암묵적으로 undefined가 반환된다.
// 4. 함수 몸체 내부에서만 사용 가능하다.
function multiply(x, y) {
    return x * y // 반환문
}
// 함수 호출은 반환값으로 평가된다.
var result = multiply(3, 5)