// 함수 선언문
// 1. 함수 선언문은 함수 리터럴과 형태가 동일하지만, 함수 이름을 생략할 수 없다.
function add(x, y) {
    return x + y
}

/*===================================*/

// 함수 표현식
// 1. 함수는 일급 객체이므로 함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다. 이러한 함수 정의 방식을 함수 표현식이라 한다.
// 2. 함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다. 그러므로 함수를 호출할 때는 함수 이름이 아니라 함수 객체를 가리키는 식별자를 사용해야한다.
var add = function(x, y) {
    return x + y
}

/*===================================*/

// Function 생성자 함수
// 1. 이 방법으로 함수를 생성하는 방식은 일반적이지 않으며 바람직하지도 않음
// 2. 함수 선언문이나 함수 표현식으로 생성한 함수와 동일하게 동작하지 않음 이 점에 주목
var add = new Function('x', 'y', 'return x + y')

/*===================================*/

// 화살표 함수
var add = (x, y) => x + y;

/*===================================*/
// 함수 새성 시점과 함수 호이스팅
// 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문에 발생함

// 함수 참조
console.log(add) // add(x, y)
console.log(sub) // undefined

console.log(add(2, 5)) // 7
console.log(sub(2, 5)) // TypeError: sub is not a function

function add(x, y) {
    return x + y
}

var sub = function(x, y) {
    return x - y
}