// 단항 산술 연산자
// ++ => 증가
// -- => 감소
// + => 어떠한 효과도 없다. 음수를 양수로 반전시키지도 않음
// - => 양수를 음수로, 음수를 양수로 반전한 값을 반환함

/*===================================*/

// 증가/감소(++/--) 연산자는 피연산자의 값을 변경하는 부수 효과가 있다
var x = 1;

x++; // x = x + 1;
console.log(x); // 2

x--; // x = x - 1;
console.log(x) // 1

/*===================================*/

// 증가/감소(++/--) 연산자는 위치에 의미가 있다.
// 피연산자의 앞에 위치한 연산자는 먼저 피연산자의 값을 증가/감소시킨 후, 다른 연산을 수행한다.
// 피연산자의 뒤에 위치한 연산자는 먼저 다른 연산을 수행한 후, 피연산자의 값을 증가/감소시킨다.

var x = 5, result;

// 선할당 후증가
result = x++;
console.log(result, x); // 5 6

// 선증가 후할당
result = ++x;
console.log(result, x); // 7 7

// 선할당 후감소
result = x--;
console.log(result, x); // 7 6

// 선감소 후할당
result = --x;
console.log(result, x); // 5 5

/*===================================*/

// + 단항 연산자는 숫자 타입이 아닌 피연산자에 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다.

+10; // 10
+(-10); // -10

// 문자열을 숫자로 타입 변환한다(부수 효과는 없음)
var x = '1';
console.log(+x); // 1
console.log(x); // "1"

// 불리언 값을 숫자로 타입 변환한다(부수 효과는 없음)
x = true
console.log(+x); // 1
console.log(x) // true

// 불리언 값을 숫자로 타입 변환한다(부수 효과는 없음)
x = false
console.log(+x); // 0
console.log(x); // false

// 문자열을 숫자로 타입 변환할 수 없으므로 NaN을 반환한다(부수 효과는 없음)
x = 'Hello';
console.log(+x); // NaN
console.log(x); // "Hello"

/*===================================*/

// - 단항 연산자는 피연산자의 부호를 반전한 값을 반환한다.
-(-10); // 10

// 문자열을 숫자로 타입 변환한다.
-'10'; // -10

// 불리언 값을 숫자로 타입 변환한다.
-true; // -1

// 문자열은 숫자로 타입 변환할 수 없으므로 NaN을 반환한다.
-"Hello"; // NaN


